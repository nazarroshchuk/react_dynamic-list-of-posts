{"version":3,"sources":["components/PostsList/PostsList.jsx","components/Loader/Loader.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/services.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","posts","fetchPostId","useState","postId","setPostId","className","length","map","post","key","id","userId","title","type","classNames","Active","onClick","postID","Loader","NewCommentForm","onAddComment","name","setName","email","setEmail","body","setBody","isLoad","setLoad","onSubmit","e","preventDefault","value","placeholder","onChange","target","required","POSTS_URL","COMMENTS_URL","getUsersPosts","fetch","then","response","ok","json","Promise","reject","PostDetails","postDetails","setPostDetails","comments","setComments","showComments","setShowComments","setIsLoad","isUpdateComments","setUpdateComments","useEffect","getPostDetails","data","filter","comment","getPostComments","onUpdateComments","onDeleteComment","url","method","headers","deleteComment","prev","requestOptions","JSON","stringify","addComment","App","setPosts","users","setUsers","selectedUser","setSelectedUser","user","catch","err","onSelectUser","useCallback","sort","a","b","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2078b54a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport classNames from 'classnames/bind';\n\nexport const PostsList = ({ posts, fetchPostId }) => {\n  const [postId, setPostId] = useState('');\n\n  const onOpenHandler = (postID) => {\n    setPostId(postID);\n    fetchPostId(postID);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>\n        Posts:\n        {' '}\n        {posts.length}\n      </h2>\n\n      <ul className=\"PostsList\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                'PostsList__button',\n                'button',\n                { Active: post.id === postId },\n              )}\n              onClick={() => onOpenHandler(post.id === postId ? 0 : post.id)}\n            >\n              {post.id !== postId ? 'Open' : 'Close'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  fetchPostId: PropTypes.func.isRequired,\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string || null.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { Loader } from '../Loader';\n\nexport const NewCommentForm = ({ postId, onAddComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isLoad, setLoad] = useState(false);\n\n  const nameHandler = (e) => {\n    setName(e.target.value);\n  };\n\n  const emailHandler = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const bodyHandler = (e) => {\n    setBody(e.target.value);\n  };\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const submitComment = (e) => {\n    e.preventDefault();\n    const data = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    onAddComment(data, setLoad);\n    resetForm();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitComment}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={nameHandler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={emailHandler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={bodyHandler}\n          required\n        />\n      </div>\n\n      {!isLoad\n        ? (\n          <button\n            type=\"submit\"\n            className=\"NewCommentForm__submit-button button\"\n          >\n            Add a comment\n          </button>\n        )\n        : <Loader />\n      }\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAddComment: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\nexport const USERS_URL = 'https://mate-api.herokuapp.com/users';\nexport const POSTS_URL = 'https://mate-api.herokuapp.com/posts';\nexport const COMMENTS_URL = 'https://mate-api.herokuapp.com/comments';\n","import { COMMENTS_URL, POSTS_URL, USERS_URL } from './api';\n\nexport function getUsersPosts() {\n  return fetch(POSTS_URL)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(response)));\n}\n\nexport function getAllUsers() {\n  return fetch(USERS_URL)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(response)));\n}\n\nexport function getPostDetails(postId) {\n  return fetch(`${POSTS_URL}/${postId}`)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(response)));\n}\n\nexport function getPostComments(postId) {\n  return fetch(COMMENTS_URL)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(response)))\n    .then(response => response.data\n      .filter(comment => comment.postId === postId));\n}\n\nexport function addComment(data) {\n  const url = COMMENTS_URL;\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  };\n\n  return fetch(url, requestOptions)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(response)));\n}\n\nexport function deleteComment(id) {\n  const url = `${COMMENTS_URL}/${id}`;\n  const requestOptions = {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n  };\n\n  return fetch(url, requestOptions)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(response)));\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport {\n  addComment,\n  deleteComment,\n  getPostComments,\n  getPostDetails,\n} from '../../api/services';\nimport { Loader } from '../Loader';\n\nexport const PostDetails = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [showComments, setShowComments] = useState(true);\n  const [isLoad, setIsLoad] = useState(false);\n  const [isUpdateComments, setUpdateComments] = useState(false);\n\n  useEffect(() => {\n    setIsLoad(true);\n    getPostDetails(postId)\n      .then((response) => {\n        setPostDetails(response.data);\n        setIsLoad(false);\n      });\n  }, [postId]);\n\n  useEffect(() => {\n    getPostComments(postId)\n      .then(response => setComments(response));\n  }, [isUpdateComments, postId]);\n\n  const onHideComments = () => {\n    setShowComments(prev => !prev);\n  };\n\n  const onUpdateComments = () => {\n    setUpdateComments(!isUpdateComments);\n  };\n\n  const onDeleteComment = (id) => {\n    deleteComment(id)\n      .then(onUpdateComments);\n  };\n\n  const onAddComment = (data, setLoad) => {\n    setLoad(true);\n    addComment(data)\n      .then((response) => {\n        setLoad(false);\n        onUpdateComments();\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {!isLoad && comments && postDetails\n        ? (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{postDetails.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={onHideComments}\n              >\n                Hide\n                {' '}\n                {comments.length}\n                {' '}\n                {' '}\n                comments\n              </button>\n\n              <ul className=\"PostDetails__list\">\n                {showComments && comments.map(comment => (\n                  <li key={comment.id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => onDeleteComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            </section>\n          </>\n        )\n        : <Loader />\n      }\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            onAddComment={onAddComment}\n            postId={postId}\n            onUpdateComments={onUpdateComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllUsers, getUsersPosts } from './api/services';\nimport { Loader } from './components/Loader';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [isLoad, setIsLoad] = useState(false);\n  const [postId, setPostId] = useState(0);\n\n  useEffect(() => {\n    setIsLoad(true);\n    getAllUsers('/users')\n      .then((response) => {\n        setUsers(response.data.filter(user => user.id <= 11));\n        setIsLoad(false);\n      })\n      .catch(err => err);\n  }, []);\n\n  useEffect(() => {\n    getUsersPosts('/posts')\n      .then((response) => {\n        setPosts(response.data);\n        setIsLoad(false);\n      })\n      .catch(err => err);\n  }, []);\n\n  const onSelectUser = useCallback((e) => {\n    const userId = e.target.value;\n\n    setSelectedUser(userId);\n    setIsLoad(true);\n    getUsersPosts('/posts')\n      .then((response) => {\n        +userId\n          ? setPosts(response.data.filter(post => post.userId === +userId))\n          : setPosts(response.data);\n        setIsLoad(false);\n      })\n      .catch(err => err);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={onSelectUser}\n          >\n            <option value=\"0\">All users</option>\n            {users\n              .sort((a, b) => a.id - b.id)\n              .map(user => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {!isLoad\n            ? (\n              <PostsList\n                posts={posts}\n                userId={selectedUser}\n                fetchPostId={setPostId}\n              />\n            )\n            : <Loader />\n          }\n        </div>\n\n        {postId !== 0\n          && (\n            <div className=\"App__content\">\n              <PostDetails\n                postId={postId}\n              />\n            </div>\n          )\n        }\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}